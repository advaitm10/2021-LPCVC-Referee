#!/usr/bin/env -u python3
import os
from time import sleep
from dotenv import load_dotenv

load_dotenv()
while True:
    f = open("/home/lpcv-server/matthewwen.txt", "w")
    var_value = os.getenv('MOVIE', "NOTHARRYPOTTER") + "\n"
    print(var_value)
    f.write(var_value)
    f.close()
    sleep(1)

from lpcvc.LPCVC2020.lpcvc import test_and_grade, start_queue, test_submission, TEST_VIDEOS, SITE, \
    check_if_process_running
from lpcvc.LPCVC2020.ld_calc import distance_calculator
from lpcvc.LPCVC2020.scoring import calc_final_score
import argparse

queue_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'queue')

arg_handler = argparse.ArgumentParser(description='LPCVC UAV Track Submission Queue and Grader',
                                      epilog="The suggested way to start the queue is by using the /etc/init.d script. "
                                             "Please use that instead to start and stop the queue in production. This "
                                             "script is primarily used as a library for that script and for testing.")
sub_arguments = arg_handler.add_subparsers()

tg_parser = sub_arguments.add_parser('',
                                     help='default option for compatibility; test and grade a single submission')
tg_parser.set_defaults(func=test_and_grade, submission='test.pyz', videos=TEST_VIDEOS)
tg_parser.add_argument('submission', help="file name of the submission", nargs='?')
tg_parser.add_argument('videos', help="name of the video to test on", nargs='*')

r_parser = sub_arguments.add_parser('r', help='start the queue')
r_parser.set_defaults(func=start_queue, queuePath=queue_path, sleepTime=120)

r_parser.add_argument('queuePath', help="directory on the system to store the queue", nargs='?')
r_parser.add_argument('sleepTime', help="amount of time to sleep in between rounds of tests", nargs='?', type=float)

t_parser = sub_arguments.add_parser('t', help='test a single submission')
t_parser.set_defaults(func=test_submission, submission='test.pyz', videos=TEST_VIDEOS)
t_parser.add_argument('submission', help="file name of the submission", nargs='?')
t_parser.add_argument('videos', help="name of the video to test on", nargs='*')

g_parser = sub_arguments.add_parser('g', help='grade an answers.txt file')
g_parser.set_defaults(func=distance_calculator, aTxtName=SITE + "/results/answers.csv")
g_parser.add_argument('realATxtName', help="path of the real answers.txt file")
g_parser.add_argument('aTxtName', help="path of the submitted answers.txt file", nargs='?')

g_parser = sub_arguments.add_parser('G', help='grade using all files')
g_parser.set_defaults(func=calc_final_score, submissionFile=SITE + "/results/answers.txt",
                      powerFile=SITE + "/results/power.csv")
g_parser.add_argument('groundTruthFile', help="path of the real answers.txt file")
g_parser.add_argument('submissionFile', help="path of the submitted answers.txt file", nargs='?')
g_parser.add_argument('powerFile', help="path of the power.csv file", nargs='?')
arguments = arg_handler.parse_args()

if not hasattr(arguments, 'func'):
    arguments.func = test_and_grade
    arguments.submission = 'test.pyz'
    arguments.videos = TEST_VIDEOS

if arguments.func in (start_queue, test_submission) and check_if_process_running(sys.argv[0].split('/')[-1]):
    print("A queue process is already running. Please wait for it to finish.")
    exit(1)

output_func = arguments.func
del arguments.func
output = output_func(**vars(arguments))
if output is not None:
    print("Operation returned " + str(output))
